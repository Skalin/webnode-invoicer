version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    ports:
      - "8080:80"
    volumes:
      - .:/app/
    links:
      - php

  php:
    container_name: webnode_php
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    volumes:
      - .:/app/

  # MySQL service
  mysql:
    image: mysql:8
    container_name: webnode_mysql-server
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - mysql_data:/var/lib/mysql

  # phpMyAdmin service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: webnode_phpmyadmin
    platform: linux/amd64
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "8888:80"
    depends_on:
      - mysql


###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  mysql_data:
    driver: local

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
